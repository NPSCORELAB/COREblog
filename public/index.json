[{"authors":["sean-everton"],"categories":null,"content":"Sean Everton is an Assistant Professor in the Department of Defense Analysis and the Co-Director of the CORE Lab at the Naval Postgraduate School (NPS). Prior to joining NPS in 2007 he served as an adjunct professor at both Santa Clara University and Stanford University. Professor Everton earned his MA and PhD in Sociology at Stanford University (2007) and wrote his doctoral thesis on causes and consequences of status on the economic performance of venture capital firms. He has published in the areas of social network analysis, sociology of religion, economic sociology, and political sociology and currently specializes in the use of social network analysis to track and disrupt dark networks (e.g., criminal and terrorist networks). His monograph on using social network analysis for the crafting of strategies for the disruption of dark networks was published by Cambridge University Press in 2012.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"f00eb5fe025d2a4f922e64ff3b6033e2","permalink":"/authors/sean-everton/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/sean-everton/","section":"authors","summary":"Sean Everton is an Assistant Professor in the Department of Defense Analysis and the Co-Director of the CORE Lab at the Naval Postgraduate School (NPS). Prior to joining NPS in 2007 he served as an adjunct professor at both Santa Clara University and Stanford University. Professor Everton earned his MA and PhD in Sociology at Stanford University (2007) and wrote his doctoral thesis on causes and consequences of status on the economic performance of venture capital firms.","tags":null,"title":"Sean Everton","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1584316800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584316800,"objectID":"d457f5a2be7f5a2d1ff7e5ac24466730","permalink":"/talk/bragg-march-2020/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/bragg-march-2020/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"SNA for SOF, Fort Bragg","type":"talk"},{"authors":null,"categories":["R"],"content":" Introduction The goal of this document is to provide you with a basic understanding of R that will empower you to further your data analysis skill set. If you are asking yourself, “Why R?” Consider that R is hot! While R is not the only free software environment for data analysis, and perhaps not the most intuitive if your frame of reference is pretty much any other programming language, it is among one of the fastest growing programming languages world-wide. Notably, only behind Python, Java, and Java Script (“Python Has Brought Computer Programming to a Vast New Audience” 2018).\nArguably, the key features for R are:\nThe community: With 450+ user groups worldwide, close to 300,000 questions asked on Stackoverflow, and a popular hashtag (#rstats) on Twitter. In short, R provides an open-source route for users to participate and share research, tools, etc. Highly extensible: A positive side-effect of the open-source nature of the R community is the large, and ever growing, universe of add-on packages. The Comprehensive R Archive Network (CRAN) is a network that stores up-to-date versions of R alongside code and documentation developed by other users. As of July 2019, there were over 14,500 packages available on the CRAN. In addition to the large number of packages, the variety among these is one of the reasons R is so successful; this is to say, chances are that someone has already solved a problem that you are working on and has made that code available for you to use by downloading their package (Wickham 2015b). RStudio: If you have any coding experience, you may have already come across any number of integrated development environments (IDE). However, if you have not, these are software applications that provide features for programmers to edit code, automate certain tasks, and even debug. RStudio is the premier IDE for R programming! It is a free and open tool for developers and teams working on data science. While it is not a requirement for working in R, using it will make your life easier.  Now that you are sold on using R, let’s walk through the goals of this tutorial. In short, this document is designed to get you somewhat comfortable with the basics, such as:\nGetting you familiarized with R objects and data types (along the way we will cover some crucial jargon) Exploring some of the base functions of R Exploring how to expand R’s base capabilities through user defined functions  Keep in mind that this document does not assume that you have a deep background in programming or data analysis. As such, it is intended to be comprehensive. Don’t let this over-specificity on “the basics” discourage you. The fact that you are curious about programming signals that you have some type of data need, whether that may be to gather, summarize, transform, tidy, explore, visualize, model, or present your data. This document will not cover most of those topics. Rather, this document is meant to serve as a primer for those eager to go down the “R rabbit hole”.\nFinally, this document is one in a plethora of tutorials available to new users. If you have the opportunity, consult as many of these online resources as you can. Among some of the notable resources introducing R to new users are:\n Quick-R by Data Camp A general and basic introduction to R programming by Poormina Thakur at datascience+ The Beginner’s guide to R: Introduction and Learn to use R: Your hands-on guide by Sharon Machalis at Computerworld   What is R? R is a free, open-source, and highly extensible language and environment for statistical computing and graphics (R Core Team 2018). In layman terms, this is to say that R is a software suite primarily designed for data analysis, visualization, and communication much like other tools (e.g., SPSS, SAS, etc.); however, R is crucially free and open-source. This means that the source code is made available to all who wish to access it. This distribution typically occurs through the comprehensive R archive network (the aforementioned CRAN), which is a series of servers distributed around the world and used to facilitate the free distribution of the software. The latest version of R, as well as older versions, are archived and freely distributed through the CRAN website, here. The free distribution of the software includes a basic graphic user interface (GUI) were you can type commands and get results of executing these commands immediately (see Figure 1).\nFigure 1. R Console\n In addition to the R software, the CRAN hosts a variety of open-source packages, which are bundles of share-able code, data, documentation, and tests intended to facilitate different types of tasks (e.g., clean, structure, and graph data). While R exists as a base environment with a reasonable amount of functionality, packages allow you to quickly expand the functionality and even interface with other programming languages, such as Python. To recap, packages are fundamental units of shareable code created by other R users intended to solve a common problem (Wickham 2015b).\nConventions Used in This Tutorial Before moving forward, let’s set up some basic typographical conventions.\nItalic - Indicating new terms, URLs, email addresses, file names, and file extensions.\nBold - Indicating the names of R packages.\nConstant width - Used for program listings, as well as within paragraphs to refer to elements such as variable or function names, databases, data types, etc. In other words, it denotes code listing that should be typed as is or previously defined objects.\nConstant width italic - Text that should be replaced with user-supplied values or determined by context.\nConstant width bold - Shows commands or other text that users should type literally.\nThese conventions come from R for Data Science (Wickham and Grolemund 2017) and are included in order to help guide you through reading this documentation.\n  The R Environment: Creating, Understanding, and Using Objects In this section we will cover a variety of jargon and programming principles crucial to R. Table 1 is a summary of the terms covered in the following subsections, this material was adapted from the R Language Definitions site.\n  Term Definition    Object An object is a data structure having some features that define it and how it will act (attributes and methods which act on ints attributes). In R, all data types and functions are considered objects.  Function A set of organized statements that perform a specific task.  Vector A kind of data storage made of contiguous cells containing data.  Atomic Vector A vector were all values are the same data type.  List Another kind of contiguous data storage were each element can contain any type of R object.  Matrix A two-dimmensional data storage structure were all elements must contain the same type of R object.  Data Frame A two-dimmensional data storage structure which can contain any variety of data types in vectors or matrices of the same length.  Logical A data type containing TRUE or FALSE values.  Double A data type containing numeric class for floating point numbers.  Integer A data type containing non-fractional numbers.  Character A data type containing alphanumeric or character strings.    Creating Most of your actions in R will revolve around using commands in the console rather than dialog boxes, which might seem like a tall order at first; however, with time and practice this workflow should become more enjoyable. The simplest way to wrap your brain around using commands is by thinking of using inputs and expecting outputs. This is to say, you provide R with an inputs, and it will produce an output. For instance you can type any number into the console as such:\n1 ## [1] 1 Notice the immediate output, which should mimic your numerical input. Let’s expand on this basic input/output model by including some functions. Base R is chockablock with features that allow you to work with data. For instance, to perform an addition you should provide two numbers separated by a addition operator (+), like so:\n1 + 1 ## [1] 2 In this example, you used a arithmetic operator to connect two values and perform a simple calculation (more information on operators can be found here). In addition to operators, base R includes a variety of functions, which are sets of organized statements that perform a specific action to include creating other functions. Typical commands in R usually include one or more of the following:\nObjects: Broadly speaking these can various types of information, such as a single value (such a s a number) or a collection of information such as a data set, a statistical model, images, etc. Functions: Reusable code used to perform a an action.  For example, instead of performing the addition using the + operator, you can use the sum() function, which will take a series of values and return the sum of all arguments, like so:\nsum(1, 1, 1) ## [1] 3 In order to store information in the R environment, the language uses an assignment operator, which is a statement that sets and/or resets a value stored and denoted by a variable name. The most common type of assignment in R will follow the general command form:\nobject \u0026lt;- function Keep in mind that assignment commands contain a mixture of both objects and functions. However, assignments will always include an assignment operator (\u0026lt;-), like so:\nadded_value \u0026lt;- sum(1, 2, 3) A simplified way to read the statement above would be “create an object named ‘x’, containing the value of the sum of 1 + 2 + 3”. Here the object would be the value from the product of the sum and the object is bound to a name, added_value. Think about it like this, no immediate output was produced from the previous command (at least not on the console). In order to call the value, type added_value into the console. What is the output? By typing the name of the object you summon the value. By this logic you should now be able to use the name of your object as placeholder for the value(s) in the object. What happens if you sum the added_value object to another number using the + operator? Finally, what is the product of summing the added_value object to itself?\n Understanding Now that you have begun working with the console and creating objects, let’s take a look at the most important family of data type in R, the vectors. Vectors are the foundation on which more complex objects and structures are built. Vectors come in two flavors in R: atomic and lists (Wickham 2019). We can define them as follow:\n atomic vectors: a series of one or more values were all elements must have the same data type. lists: a series of one or more values were elements can have different types.  Underlining the vectors are two core concepts to keep in mind. First, these are one-dimensional structures. Think of them like a line of values all along the same axis. Second, they fall into two categories homogeneous (atomic vectors) and heterogeneous (lists). More complex data structures build upon those two core concepts. For instance, matrices are two-dimensional homogeneous data structures. This is to say, they must contain the same type of values, but can have an x and y axis (think of columns and rows). Similarly, data frames are also two-dimensional, but they can include different types of atomic vectors. Hadley Wickham, Chief Scientist at RStudio, summarizes (Wickham 2015a) these data types as follows:1\n     Homogeneous  Heterogenous      1D  Atomic Vector  List    2D  Matrix  Data Frame      Atomic Vectors These are homogeneous in nature, containing a single sequence of values of the same type, making them one-dimensional by design. The four relevant atomic vector types to statistical analysis2 are:\n logical: TRUE or FALSE, but can be abbreviated to T and F respectively. double: A numeric class for floating point numbers. You may encounter doubles in decimal (e.g., 1.0, 1.2, etc.), scientific (1.23e4), or hexadecimal (e.g., 0xa, 0xab, 0xabc, etc.). Keep in mind that there are three special values associated with doubles, these are:  Inf: Infinity. -Inf: Negative infinity. NaN: Not a number.  integer: Much like doubles, these are numbers, but written followed by the L and do not contain fractional values (e.g., 1L, 1e4L, 0xaL). character: These contain text strings , which is to say any alphanumeric value or character surrounded by \u0026quot; or ' (e.g., \u0026quot;hello\u0026quot;, \u0026quot;hello world\u0026quot;, etc.).  The simplest way to create an atomic vector is using the c() function, which is short for combine and will allow you to bind multiple values, like so:\nvector_lgl \u0026lt;- c(TRUE, FALSE, TRUE) vector_dbl \u0026lt;- c(0x1, 2.0 , 3e0) vector_int \u0026lt;- c(1L, 2L, 1:3L) vector_chr \u0026lt;- c(\u0026quot;Hello\u0026quot;, \u0026quot;world\u0026quot;, \u0026quot;!\u0026quot;) Much like with any object, you can print out the bound values by typing the name into the console. For instance, type the following into your console:\nvector_lgl vector_dbl vector_int vector_chr Before we move away from atomic vectors and into more complex data structures, we should become a familiarized with the typeof() and lenght() functions. Both of these are part of base R and are fundamental tools in understanding crucial characteristics of a vector such as its type and dimensions.\ntypeof(vector_lgl) ## [1] \u0026quot;logical\u0026quot; length(vector_lgl) ## [1] 3 Knowing the type of vector will be crucial down the line when you begin working with larger data. Each data type has specific attributes associated with it. In practical terms this means that each data type has “do’s” and “don’t”. For instance, you should be able to perform basic arithmetic on doubles and integers, but not on characters or logicals.\n Lists Lists are similar to atomic vectors, but with the crucial difference that they can and usually contain a variety data types. Think of them as a sequence were you can have all four vector types mentioned above, as well as, other types (e.g., other lists, matrices, and data frames). This means that the object along that sequence don’t have to be the same length or dimensions (1D v. 2D). This flexibility makes lists very versatile at storing multiple different type so data under one object name.\nIn order to create a list, you will enlist the aptly named function list(), which constructs or coerces data into a list type (R Core Team 2018). Let’s put that into motion:\nmy_list \u0026lt;- list(vector_lgl, vector_dbl, vector_int, vector_chr) my_list ## [[1]] ## [1] TRUE FALSE TRUE ## ## [[2]] ## [1] 1 2 3 ## ## [[3]] ## [1] 1 2 1 2 3 ## ## [[4]] ## [1] \u0026quot;Hello\u0026quot; \u0026quot;world\u0026quot; \u0026quot;!\u0026quot; Notice that the list a above contains four objects, all atomic vectors, but of different flavors. However, each object is a single item on a sequence of objects. This means that we can go a step further and name each item along that sequence, much like naming the sequence itself:\nmy_list \u0026lt;- list(lgl = vector_lgl, dbl = vector_dbl, int = vector_int, chr = vector_chr) my_list ## $lgl ## [1] TRUE FALSE TRUE ## ## $dbl ## [1] 1 2 3 ## ## $int ## [1] 1 2 1 2 3 ## ## $chr ## [1] \u0026quot;Hello\u0026quot; \u0026quot;world\u0026quot; \u0026quot;!\u0026quot; A way to read the code above is “create an object named my_list which composed of a sequence of objects, named logicals, doubles, integers, and characters, which contain the values of the aforementioned atomic vectors”. Here we have an object name pointing at other object names, which enhances our ability to store data into more complex structures. To get a better sense of the list structure, use the str() function to display the internal structure of the R object (R Core Team 2018), like so:\nstr(my_list) ## List of 4 ## $ lgl: logi [1:3] TRUE FALSE TRUE ## $ dbl: num [1:3] 1 2 3 ## $ int: int [1:5] 1 2 1 2 3 ## $ chr: chr [1:3] \u0026quot;Hello\u0026quot; \u0026quot;world\u0026quot; \u0026quot;!\u0026quot; Keep in mind that you are also able to gain a sense as to whether an object is a list using the typeof() function. Additionally, you may also want to evaluate the dimensions of this object by enlisting the lenght() function.\ntypeof(my_list) length(my_list)  Matrices A matrix is a two-dimensional data structure in which each element must be the same type (e.g., all logical, double, character, or integer.). Matrices are created with the matrix() function, like so:\nmy_matrix \u0026lt;- matrix(vector_dbl, nrow = length(vector_dbl), ncol = length(vector_dbl)) my_matrix ## [,1] [,2] [,3] ## [1,] 1 1 1 ## [2,] 2 2 2 ## [3,] 3 3 3 Let’s unpack the statement above. The matrix() function receives the first argument, double_vector, which serves as the data vector distributed among the x and y axis accordingly. In this instance, we are using the length of the numeric vector so as to set the dimensions of the matrix. The output is a 3 x 3 square were the initial vector is repeated accordingly.\nHere we will not work with matrices extensively. However, keep in mind that these are a useful way to represent, manipulate, and study a liner map between finite-dimensional vectors. Put differently, matrices are crucial for the storage of data used in many mathematical and statistical analysis, particularly in linear algebra and graph theory.\n Data Frames The last structure to discuss is the data frame, which is perhaps the most useful and intuitive. First, let’s define it. Wickham’s table above states that this structure is two-dimensional and contains a variety of data types. More formally, you can think of data frames as rectangular collections of two or more named atomic vectors, were the object names serves as column names, and row names (in R row.names). Informally, you may think of these as a table-like structure similar to those used in SQL or other tabular data storage frameworks. Within R, a large portion of statisticians, scientists, programmers, and all-around users prefer storing their data in this format.\nIn order to create a data frame in R, you must use the data.frame() function. Like so:\nmy_df \u0026lt;- data.frame(vector_lgl, vector_dbl, vector_chr) my_df ## vector_lgl vector_dbl vector_chr ## 1 TRUE 1 Hello ## 2 FALSE 2 world ## 3 TRUE 3 ! Notice that the column headers inherit the vector object name. Because data frames have both column and row names, you can use the colnames() and rownames() functions to obtain more information on the data frame. You can use column names in conjunction of different operators:\n The $ operator should allow you to call out a single column at a time, like so:  my_df$vector_dbl ## [1] 1 2 3  Similarly, the [ and ] used in conjunction with a comma and quotes (see code chunk below). Keep in mind that this operator combination accesses rows first, then columns (e.g., [rows, columns]):  my_df[ ,\u0026quot;vector_dbl\u0026quot;] ## [1] 1 2 3 # or my_df[\u0026quot;2\u0026quot;, ] ## vector_lgl vector_dbl vector_chr ## 2 FALSE 2 world Unlike lists, which can also contain multiple types of vectors, here all vectors must have the same length. This is why we can think of data frames as rectangular structures. This property also means that in addition to length a data frame can have width. Put differently, we can count the row and column lengths with functions like nrow() or ncol().\nnrow(my_df) ncol(my_df)    Functions Throughout this document you have been exposed to some functions (e.g., c(), tyepof(), etc.) As mentioned previously, functions are repeatable instructions for the program to execute. As with any set of instructions, these can by simple or complex. However, the basic recipe for creating a function is rather straight forward:\nfunction_name \u0026lt;- function(argument_1, argument2, ... ){ body } Let’s break down the recipe above:\n We are using an assignment operator (\u0026lt;-) to create a new object containing our function. As such, much like with vectors, a function is an object with a name bound to it. However, in this case the object will contain a series of instructions. To define a function, we must enlist the function() command. A user defined function can take any number of argments (e.g., argument_1, etc.), also called formals. These can be any number of objects such as numbers, data frames, to name a few. These are inputs needed for the function to run. All the content between { and } is the body of a function. This is were you will define the statements or instructions for the functions. Note that the last line in a function body will be automatically returned.  With these basic building blocks in mind, let’s create a basic function. Our first task is to create a function tasked with printing the string “hello world!” each time it is called:\nsay_hello \u0026lt;- function() { print(\u0026quot;hello world!\u0026quot;) } Now that we have defined our first function, you may proceed to call it by typing its name into the console:\nsay_hello() ## [1] \u0026quot;hello world!\u0026quot; Let’s elevate the level of difficulty a bit further, while using the basic components highlighted through this document. Many R users compile functions into bundles aimed at streamlining different tasks (e.g., data cleaning, analyzing, visualizing, sharing, etc.) These bundled sets of code are commonly known as R packages and are freely distributed through the CRAN. The following code chunk is intended to check whether or not a package is locally available and either launch it locally or run the remote installation.\ncheck_packages \u0026lt;- function(.dependencies) { for (i in seq_along(.dependencies)) { if (!requireNamespace(.dependencies[[i]], quietly = TRUE)) { install.packages(.dependencies[[i]], dependencies = TRUE) } } } Let’s break down the code chunk above. First, we defined a new function named check_packages, which expects an argument named .dependencies. The function will then generate a sequence up to the length of the vector (for (i in seq_along(.dependencies)) {}). Each value on that vector will be evaluated in order to determine whether or not a package can be loaded into your environment (if (!requireNamespace(.dependencies[[i]], quietly = TRUE)) {}). If a package cannot be loaded, the next step is to quietly attempt to install the missing package (install.packages(.dependencies[[i]], dependencies = TRUE)).\nNow that you have a basic understanding of the check_packages() function, let’s put it to use. In the following set of tutorials we will be working with the tidyverse, a set of packages designed to work together that share a common philosophy of data and R programming. As such, it seems fitting to test whether or not this library is present on your machine:\npackages \u0026lt;- c(\u0026quot;tidyverse\u0026quot;) check_packages(.dependencies = packages) Should the tidyverse be already installed on your computer, you will see no output on the console. However, should this library be missing, the installation process will take place quietly in the background.\nIf function writing does not appeal to you, don’ worry! Not all R users need to write functions. Much of your work in R can be done by leveraging others functions. However, it is important that you get a sense for the basic mechanics behind this incredibly empowering process.\n Syntax Quirks and Words of Advise As mentioned earlier in the document, R is a bit quirky, particularly if you have any experience programming in any other language. Keep in mid the following for your sanity (and to discourage you from quitting learning R early on):\nA. Syntax, syntax, syntax (!!!): R - like other programming languages- reads what you type on the screen literally. As such, it fails to understand human syntax. For example, we understand that the words “John”, “john”, \u0026quot; John\u0026quot; and “John” are all the same word, but slightly different based on capitalization and trailing or leading spaces. However, R fails to differentiate between these four options, instead itemizing them all as individual observations. Broadly speaking, these are two main types of syntactic errors to keep an eye out for: capitalization and spacing.\nA.1. Capitalization: We are accustomed to capitalizing letters at the beginning of new sentences. However, keep in mind that programming is not like general writing; for the most part you are hoping that the machine understands your commands and not a layman reader. To test this point begin by copying and pasting the following function into your R console:\nSys.time() As mentioned previously, functions are statements that performs a specific task in R. We call them by providing the object name and some arguments. Above we used the Sys.time() function, which is a base R function that return the system’s idea of the current time and date (R Core Team 2018). Notice that the first letter in this function is capitalized. Now copy and paste the following command:\nsys.time() This time you should see a red error message reading Error in sys.time() : could not find function \u0026quot;sys.time\u0026quot;. A way to read this is “R could not find the sys.time() function because the computer cannot recognize the difference between the properly capitalized function and the incorrectly written command.”\u0026quot;\nA.2. Spacing: Spacing: Much like casing, spacing matters. However, unlike casing, R is not as cut and dry on how you must space certain items. The Google’s R Style Guide provides multiple examples of when spacing matters. Here we will only focus on one scenario: placing spaces around binary operators (=,+,-,\u0026lt;-, etc.). Try copying and pasting the following example into the R console:\nx\u0026lt;-1 In the example above x\u0026lt;-1 is an assignment, where you have used \u0026lt;- to assign the number 1 to the x character. As such, x now equals to 1. To test this, type x into your console, the output should be a number 1. Now, let’s add some strategically placed spaces to the previous code as such:\nx \u0026lt; -1 What output did you get from the code above? The output you should see is a FALSE message stating that the object x is in fact not larger than the value -1. Why do you think the output is different? The short answer is that the additional spacing changed the input, so that in the second example R reads the command as the following test: “is x smaller than -1”, to which the answer is “no” or FALSE.\nB. Document your code: It is a good idea to comment on your code regularly. Much like with any type of project, workflow, and/or documentation, consistent note taking is key to keeping your sanity. This point is especially pertinent when you are sharing code or if you have to step away from your code for a few days or even longer. Imagine this document with only code chunks. How long do you think it would take you to understand the code and our logic behind it?\nAlthough your notes do not need to be as extensive as the narrative in this tutorial, they should be enough for you to understand what you are looking at, why you are doing something in a specific manner, etc. Luckily, R allows you to add notes and comments in your scripts and documentation. In order to insert notes or comments into your code, you should use the # symbol, which tells R to ignore the content to the right of the symbol. For example, try copying and pasting the following commands into R console:\nSys.time() #The Sys.time() function return the system\u0026#39;s idea of the current time and date As opposed to:\n#Sys.time() The Sys.time() function return the system\u0026#39;s idea of the current time and date What is the difference between these commands? Using the # symbol to the right of a function allows for the function to run, while you are still able to include notes or comments. Alternatively, including a # before the function disables it.\nC. Work smarter, not harder: No need to memorize everything, just remember how to find help. For example, should you forget how to work with a specific function or package, you may type ? or ?? followed by the name of the function or package into your console. To get more information on the base R package, for instance, type the following into your R console:\n?base If you wanted to get information on the all help pages related to base, type ??base into your console. This process also will work with functions. For example, if you forget how to use the Sys.time() function, you may check the documentation using ?Sys.time.\nD. Leverage the open-source community: Most R users are proud to belong to the open-source community where R, source code and its packages are available to the general public for use or modification. This means that we all continue experimenting with code to achieve better and more efficient results. It also means that we all learn from each others’ work. As such, there are a variety of platforms for learning and sharing programming knowledge. The preferred, and sometimes feared, platform for asking question on R code is StackOverflow. However, be warned that editors and contributors frown upon asking bad, poorly researched, badly documented, or repeat questions. In other words, you are encouraged to a little research before asking questions online. It is very likely that others have a blog post, tutorial, or Stack Overflow thread with the answer to your question. That being said, should you not find an answer around the internet, keep in mind these parameters as you use Stack overflow.\n Parting Thoughs and Additional Resources This document was intended to serve as a top level guide introducing you to programming with R. As such, many specifics have not been covered in detail. Here the focus was on introducing you to foundation building blocks from which you will continue building you understanding of working with data in R. To recap, in this document you have been exposed to:\n Objects Functions Assignments Vectors (e.g., atomic and lists) Data types (e.g., character, double, integer, and logical) Differences between homogeneous and heterogeneous data classes (e.g., atomic vectors and matrices v. lists and data frames) Functions: writing and using them  Using these building blocks, you should now be able to begin exploring the R ecosystem with some basic knowledge of the component upon which most tools operate. Keep in mind that learning this new programming language is an iterative process with an early high cost for learning. Yet, many tools and resources have been laid out for you to use. Keep the following set of resources on your back-pocket:\n Data Camp, an online platform for learning data science. The early modules on R are free. R for Data Science from Hadley Wickham. An essential read for those invested in learning data science with R. The author is the Chief Scientist at RStudio and principal author of many R packages. Stat 545 course from the University of British Columbia, which is an online course on data wrangling, exploration and analysis with R.  Happy R learning! 😆\n References “Python Has Brought Computer Programming to a Vast New Audience.” 2018. The Economist. Jul. 19. https://www.economist.com/science-and-technology/2018/07/19/python-has-brought-computer-programming-to-a-vast-new-audience.\n R Core Team. 2018. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n Wickham, Hadley. 2015a. Advanced R. 1st ed. O’Reilly Media, Inc.\n ———. 2015b. R Packages: Organize, Test, and Share Your Code. 1st ed. O’Reilly Media, Inc.\n ———. 2019. Advanced R. 2nd ed. Chapman \u0026amp; Hall/CRC The R Series.\n Wickham, Hadley, and Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. 1st ed. O’Reilly Media, Inc.\n    Note that arrays are not included in this framework as they are outside of the scope of this document.↩\n complex and raw are not included as these have little relevance to statistical analysis.↩\n   ","date":1576540800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576540800,"objectID":"ad804e36d7691696d14e3c494a77eac1","permalink":"/post/r-basics/r_basics/","publishdate":"2019-12-17T00:00:00Z","relpermalink":"/post/r-basics/r_basics/","section":"post","summary":"Introduction The goal of this document is to provide you with a basic understanding of R that will empower you to further your data analysis skill set. If you are asking yourself, “Why R?” Consider that R is hot! While R is not the only free software environment for data analysis, and perhaps not the most intuitive if your frame of reference is pretty much any other programming language, it is among one of the fastest growing programming languages world-wide.","tags":null,"title":"R Basics","type":"post"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1574035200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574035200,"objectID":"2749dd199e73eb1d77e802e083365d6c","permalink":"/talk/indianapolis-november-2019/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/indianapolis-november-2019/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"SNA for LE, Indianapolis","type":"talk"},{"authors":null,"categories":null,"content":" Background The purpose of this document is provide a general introduction to the Twitter analysis tool, {birdcage}. Under the sponsorship of CTTSO, the CORE Lab developed this custom tool to improve efficiency in the analysis of the social media information environment.\n{birdcage} is an open source analytic tool that enables users to search, explore, and analyze social media data efficiently. Based on practitioners’ feedback, this custom analytic tool offers Summary, Knowledge Graph, Communities and Topics, and Explore Data windows to facilitate descriptive, temporal, and relational analyses.\nFor demonstration purposes, we will start with the first window (i.e., Summary) and work through subsequent windows’ features. Users do not have to work in this manner, however. Each window offers different features that might be relevant to a specific project.\nPlease consider the following as you walk through this tutorial:\n This tool is not designed to be an “enterprise” solution; the goal is to fill analytic gaps by integrating it with existing systems. Though it can ingest data from existing systems that make their data available, the CORE Lab will continue to work on incorporating new data sources.  Accessing the Tool and Selecting a Project Upon accessing the app via the web browser, you will be presented with the Select Project window. As of the time of writing this tutorial, the app offers access to Twitter data of projects from an existing enterprise system, namely Pulse; however, the Lab is working on additional integration options. Note that when you select a project, it may take a few second to load.\nGlobal Date Filter It is often useful to filter a data set based on a specific time frame. The Global Date Filter permits analysts to interact with the data to observe trends during a specific period of time. For instance, we can see the data from this project range from February 19, 2019 through March 20, 2019.\nTwo key features to keep in mind:\n The default date range is based on the date range in the underlying data. The filter applies to all the subsequent windows. For example, a filter created in the Summary window will apply to the Knowledge Graph as well.   Summary Statistics Once you have selected a data set and a date range using the Global Date Filter, the Summary window provides analysts with project aggregate statistics, including number of users, tweets, hashtags, URLs, media, and social network clusters. For instance, we can see that our data set in this example contains 9,283 users, 16,041 tweets, 1,446 hashtags, etc.\nMoreover, the Summary section offers interactive timelines that visualize reply, retweet, and quote activity over time. For example, we can see a spike in retweets on February 24th.\nWe can zoom into time frames of interest by drawing a box over the area. Note you can return to the global view by simply double, left-clicking on the timeline.\nFinally, the Summary section outlines a project\u0026rsquo;s most active accounts, most common hashtags, and most common languages.\n\nKnowledge Graph The inherent relational nature of social media means analysts have to consider how accounts and other entities of interest are embedded in larger social structures. The Knowledge Graph is intended for users to do just that. You will see an interactive table that permits you to search for users, statuses (e.g., tweets), and entities (e.g., hashtag and URLs) of interest.\nIn this example, we will select a user (note you can select multiple users or a combination of users, statuses, and hashtags) and locate the Update Graph with Selected Rows button to visualize and interact the user\u0026rsquo;s network two steps out (i.e., direct and indirect connections).\nOnce you have visualized an entity\u0026rsquo;s (or multiple entities) network, you will see the legend and the Select by feature. The former describes the entity and relationship types on the graph whereas the latter permits you to set your interactive options. For instance, the default choice is node_class, which allows you to identify and highlight all hashtags, users, etc. Note you can always choose to search your graph by node Id with the Select by Id drop-down.\nAdditionally, you can select any node of the graph to obtain attribute information.\nFinally, you can simply select Clear User Rows followed by Update Graph with Selected Rows to clear your graph (note you would select Clear Status Rows and/or Clear Entity Rows if your initial search focuses on tweets or other entities.)\n\nCommunities and Topics Similar to the Knowledge Graph, the Communities and Topics window allows analysts to search and filter users, statuses, and entities for network analysis. A major motivation in social network analysis of communication and information-based networks is to identify subgroups/clusters of nodes who interact relatively more frequently with one another than with other groups of entities. For instance, sets of nodes may cluster because they are speaking the same language, talking about the same topic(s), and/or have similar views or beliefs about an issue. The goal of the Communities and Topics window is to use a \u0026ldquo;community-detection\u0026rdquo; algorithm to identify clusters for analysts so they can see the \u0026ldquo;surrounding\u0026rdquo; community containing users, tweets, and/or other entities of interest.1\nOnce you\u0026rsquo;ve identified and selected users, tweets, and/or entities of interest, you can select Find Community and a second table will appear below the first one. In this table you will be able to explore other users, tweets, and hashtags within your initial search node\u0026rsquo;s cluster, such as the text of their tweets. As with the Knowledge Graph, you can simply select Clear User Rows followed by Update Graph with Selected Rows to clear your graph (Note you would select Clear Status Rows and/or Clear Entity Rows if your initial search focuses on tweets or other entities.)\nExplore Data The purpose of this final window is to allow analysts to search their data in a tabular format. This capability, though it may seem straightforward, is incredibly useful because Excel cannot create filters and sort large data sets without freezing.\nFinally, the About window provides general information about this tool, including our sponsor and contact information.\n We leverage the Louvain method for identifying clusters, see Blondel, Vincent D; Guillaume, Jean-Loup; Lambiotte, Renaud; Lefebvre, Etienne (9 October 2008). \u0026ldquo;Fast unfolding of communities in large networks\u0026rdquo;. Journal of Statistical Mechanics: Theory and Experiment. 2008 (10): P10008. ^   ","date":1571875200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571875200,"objectID":"59d8c7fe211ba828aebde289044494d9","permalink":"/project/birdcage/","publishdate":"2019-10-24T00:00:00Z","relpermalink":"/project/birdcage/","section":"project","summary":"Search, explore, and analyze social media data efficiently.","tags":["Social Media","Apps"],"title":"birdcage","type":"project"},{"authors":null,"categories":null,"content":"","date":1571875200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571875200,"objectID":"15e33203ba6cc1e2830574758d3470a2","permalink":"/project/cttso-r-education/","publishdate":"2019-10-24T00:00:00Z","relpermalink":"/project/cttso-r-education/","section":"project","summary":"R Learning Materials","tags":["Education Materials"],"title":"R Learning Materials","type":"project"},{"authors":null,"categories":null,"content":" Background The CORE Lab is proud to partner with law enfocerment practioners (LE) under the guidance and sponsorship of the Office of the Assistant Secretary of Defense through the Domestic Preparedness Support Initiative, the Combating Terrorism Techinical Support Office, and the Western Regional Counterdrug Training Center. Our goal is to share knoweledge, skills, and abilities related to several analytical methodologies to include SNA.\n","date":1571875200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571875200,"objectID":"bdca5db1ec6240e1412260213c09adfa","permalink":"/project/sna-for-le/","publishdate":"2019-10-24T00:00:00Z","relpermalink":"/project/sna-for-le/","section":"project","summary":"Learning materials for LE practioners","tags":["Education Materials"],"title":"SNA for LE","type":"project"},{"authors":[null],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":[null,"Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":[null,"Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]